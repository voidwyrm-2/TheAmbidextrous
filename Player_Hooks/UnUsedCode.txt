//hooks declarations

//On.Player.Jump += Player_Double_Jump;
//On.Player.Die += Phoenix;

//On.Player.Update += new On.Player.hook_Update(this.OnWall);
//On.Player.SwallowObject += Player_OutsiderFoodEffects;

//On.Player.ObjectEaten += Player_ObjectEaten;

//On.Player.Update += Player_SpawnWithPearl;
//On.Menu.MainMenu.eeCheck += MainMenu_eeCheck;
//On.GameSession.ctor += GameSession_ctor;
//On.Menu.MainMenu.Update += MainMenu_Update;
//On.Menu.SlugcatSelectMenu.SlugcatUnlocked += SlugcatSelectMenu_SlugcatUnlocked;

//On.Creature.Violence += Creature_Violence;

//On.Player.Die += Player_BlackholeSun;
//On.AbstractCreature.ctor += AbstractCreature_ctor;

//On.Player.Update += Player_GiveSofanthiel;

//On.Player.ActivateAscension += Player_ActivateAscension;

//hooks declarations end




//hooks code

/*
private void Player_ActivateAscension(On.Player.orig_ActivateAscension orig, Player self)
{
    if (Input.GetKey(KeyCode.Keypad1) /*&& TestAscention == false*/ /*&& SecretScugHooks.IsOvenTimerDone*/)
    {
        //self.ActivateAscension();
        //self.monkAscension = true;
        TestAscention = true;
        self.monkAscension = true;
        self.wantToJump = 0;
        self.room.PlaySound(SoundID.SS_AI_Give_The_Mark_Boom, self.mainBodyChunk, false, 1f, 1f);
        self.room.AddObject(new ShockWave(self.bodyChunks[1].pos, 100f, 0.07f, 6, false));
        for (int i = 0; i < 10; i++)
        {
            self.room.AddObject(new WaterDrip(self.bodyChunks[1].pos, Custom.DegToVec(UnityEngine.Random.value * 360f) * Mathf.Lerp(4f, 21f, UnityEngine.Random.value), false));
        }
    }
    else if (Input.GetKey(KeyCode.Keypad2) /*&& TestAscention == true*/ /*&& SecretScugHooks.IsOvenTimerDone*/)
    {
        TestAscention = false;
        self.room.PlaySound(SoundID.HUD_Pause_Game, self.mainBodyChunk, false, 1f, 0.5f);
        self.monkAscension = false;
    }
    orig(self);
}
*/

/*
//Original: UW_S02 //Test: UW_A12
private void Player_GiveSofanthiel(On.Player.orig_Update orig, Player self, bool eu)
{
    //var DroneBool = new PlayerNPCState(AbstractCreature abstractCreature, int playerNumber);
    if (IsPlayerAmbidextrous)
    {
        //PlayerNPCState.Drone = true;
        MoreSlugcatsEnums.GateRequirement.RoboLock = null;
        RegionGate.GateRequirement roboLock = MoreSlugcatsEnums.GateRequirement.RoboLock;
        if (roboLock != null)
        {
            roboLock.Unregister();
        }
    }
    orig(self, eu);
}
*/

/*
public FirecrackerPlant.ScareObject scareObj;

private void AbstractCreature_ctor(On.AbstractCreature.orig_ctor orig, AbstractCreature self, World world, CreatureTemplate creatureTemplate, Creature realizedCreature, WorldCoordinate pos, EntityID ID)
{
    if (realizedCreature.scareObj == null)
    {
        var room = realizedCreature.room;
        var pos = realizedCreature.mainBodyChunk.pos;
        var color = realizedCreature.ShortCutColor();
        realizedCreature.scareObj = new FirecrackerPlant.ScareObject(pos);
        realizedCreature.scareObj.fearRange = 8000f;
        realizedCreature.scareObj.fearScavs = true;
        realizedCreature.room.AddObject(this.scareObj);
        realizedCreature.room.InGameNoise(new InGameNoise(base.firstChunk.pos, 8000f, this, 1f));
    }
}

private void Player_BlackholeSun(On.Player.orig_Die orig, Player self)
{
    bool wasDead = self.dead;

    orig(self);

    if (!wasDead && self.dead)
    {
        // Adapted from ScavengerBomb.Explode
        var room = self.room;
        var pos = self.mainBodyChunk.pos;
        var color = self.ShortCutColor();
        Vector2 vector = Vector2.Lerp(pos, lastPos, 0.35f);
        self.room.AddObject(new SingularityBomb.SparkFlash(pos, 300f, new Color(0f, 0f, 1f)));
        self.room.AddObject(new Explosion(self.room, self, vector, 7, 450f, 6.2f, 10f, 280f, 0.25f, self.thrownBy, 0.3f, 160f, 1f));
        self.room.AddObject(new Explosion(self.room, self, vector, 7, 2000f, 4f, 0f, 400f, 0.25f, self.thrownBy, 0.3f, 200f, 1f));
        self.room.AddObject(new Explosion.ExplosionLight(vector, 280f, 1f, 7, self.explodeColor));
        self.room.AddObject(new Explosion.ExplosionLight(vector, 230f, 1f, 3, new Color(1f, 1f, 1f)));
        self.room.AddObject(new Explosion.ExplosionLight(vector, 2000f, 2f, 60, self.explodeColor));
        self.room.AddObject(new ShockWave(vector, 350f, 0.485f, 300, true));
        self.room.AddObject(new ShockWave(vector, 2000f, 0.185f, 180, false));
        for (int i = 0; i < 25; i++)
        {
            Vector2 a = Custom.RNV();
            if (self.room.GetTile(vector + a * 20f).Solid)
            {
                if (!self.room.GetTile(vector - a * 20f).Solid)
                {
                    a *= -1f;
                }
                else
                {
                    a = Custom.RNV();
                }
            }
            for (int j = 0; j < 3; j++)
            {
                self.room.AddObject(new Spark(vector + a * Mathf.Lerp(30f, 60f, Random.value), a * Mathf.Lerp(7f, 38f, Random.value) + Custom.RNV() * 20f * Random.value, Color.Lerp(self.explodeColor, new Color(1f, 1f, 1f), Random.value), null, 11, 28));
            }
            self.room.AddObject(new Explosion.FlashingSmoke(vector + a * 40f * Random.value, a * Mathf.Lerp(4f, 20f, Mathf.Pow(Random.value, 2f)), 1f + 0.05f * Random.value, new Color(1f, 1f, 1f), self.explodeColor, Random.Range(3, 11)));
        }
        for (int k = 0; k < 6; k++)
        {
            self.room.AddObject(new SingularityBomb.BombFragment(vector, Custom.DegToVec(((float)k + Random.value) / 6f * 360f) * Mathf.Lerp(18f, 38f, Random.value)));
        }
        self.room.ScreenMovement(new Vector2?(vector), default(Vector2), 0.9f);
        for (int l = 0; l < self.abstractPhysicalObject.stuckObjects.Count; l++)
        {
            self.abstractPhysicalObject.stuckObjects[l].Deactivate();
        }
        self.room.PlaySound(SoundID.Bomb_Explode, vector);
        self.room.InGameNoise(new InGameNoise(vector, 9000f, self, 1f));
        for (int m = 0; m < self.room.physicalObjects.Length; m++)
        {
            for (int n = 0; n < self.room.physicalObjects[m].Count; n++)
            {
                if (self.room.physicalObjects[m][n] is Creature && Custom.Dist(self.room.physicalObjects[m][n].firstChunk.pos, base.firstChunk.pos) < 350f)
                {
                    if (self.thrownBy != null)
                    {
                        (self.room.physicalObjects[m][n] as Creature).killTag = self.thrownBy.abstractCreature;
                    }
                    (self.room.physicalObjects[m][n] as Creature).Die();
                }
                if (self.room.physicalObjects[m][n] is ElectricSpear)
                {
                    if ((self.room.physicalObjects[m][n] as ElectricSpear).abstractSpear.electricCharge == 0)
                    {
                        (self.room.physicalObjects[m][n] as ElectricSpear).Recharge();
                    }
                    else
                    {
                        (self.room.physicalObjects[m][n] as ElectricSpear).ExplosiveShortCircuit();
                    }
                }
            }
        }
        self.CreateFear();
        self.scareObj.lifeTime = -600;
        self.scareObj.fearRange = 12000f;
        self.room.InGameNoise(new InGameNoise(pos, 12000f, self, 1f));
    }
}
*/

/*
private void Creature_Violence(On.Creature.orig_Violence orig, Creature self, BodyChunk source, Vector2? directionAndMomentum, BodyChunk hitChunk, PhysicalObject.Appendage.Pos hitAppendage, Creature.DamageType type, float damage, float stunBonus)
{
    throw new NotImplementedException();
}
*/

/*
private void MainMenu_Update(On.Menu.MainMenu.orig_Update orig, Menu.MainMenu self)
{
    orig(self);
    //int menuinput = 0;
    if (Input.anyKey)
    {
        if (Customeeinput == 5 && Input.GetKey(KeyCode.B) || Input.GetKey(KeyCode.R) || Input.GetKey(KeyCode.E) || Input.GetKey(KeyCode.A) || Input.GetKey(KeyCode.D))
        {
            Customeeinput++;
        }
        else
        {
            Customeeinput = 0;
        }
    }
    if (Customeeinput == 5)
    {
        self.manager.rainWorld.progression.miscProgressionData.currentlySelectedSinglePlayerSlugcat = SecretScug;
        self.manager.RequestMainProcessSwitch(ProcessManager.ProcessID.IntroRoll);
        bool SecretScugUnlocked = true;
    }
}

*/


/*
private bool SlugcatSelectMenu_SlugcatUnlocked(On.Menu.SlugcatSelectMenu.orig_SlugcatUnlocked orig, Menu.SlugcatSelectMenu self, SlugcatStats.Name i)
{
    throw new NotImplementedException();
}
*/

/*
private void MainMenu_eeCheck(On.Menu.MainMenu.orig_eeCheck orig, Menu.MainMenu self)
{
    orig(self);
    if (Input.anyKey)
    {
        if (self.eeinput == 5 && Input.GetKey(KeyCode.B) || Input.GetKey(KeyCode.R) || Input.GetKey(KeyCode.E) || Input.GetKey(KeyCode.A) || Input.GetKey(KeyCode.D))
        {
            self.eeinput++;
        }
        else
        {
            self.eeinput = 0;
        }
    }
    if (self.eeinput == 5)
    {
        self.manager.rainWorld.progression.miscProgressionData.currentlySelectedSinglePlayerSlugcat = Breadlord;
        self.manager.RequestMainProcessSwitch(ProcessManager.ProcessID.IntroRoll);
    }
}
*/

/*
private void Player_SpawnWithPearl(On.Player.orig_Update orig, Player self, bool eu)
{
    orig(self, eu);
    if (self.SlugCatClass == MySlugcat && self.room.game.session is StoryGameSession story && story.saveState.cycleNumber == 0)
    {
        self.objectInStomach.type = AbstractPhysicalObject.AbstractObjectType.FirecrackerPlant;
    }
}
*/


/*
private void Player_ObjectEaten(On.Player.orig_ObjectEaten orig, Player self, IPlayerEdible edible)
{
    if (self.SlugCatClass == MySlugcat && edible.BitesLeft < 1 && edible.Edible.Equals(AbstractPhysicalObject.AbstractObjectType.DangleFruit))
    {
        self.AddQuarterFood();
        self.AddQuarterFood();
    }
}
*/


//private void Phoenix(On.Player.orig_Die orig, Player self)
//{
	//bool wasDead = self.dead;
	//if (!wasDead && self.dead && Rebirth.TryGet(self, out bool playerisdead) && playerisdead)
	//{ 
		//On.Player.
	//}
//}

//private void Player_Double_Jump(On.Player.orig_Jump orig, Player self)
//{
	//orig(self);

	//if (DoubleJump.TryGet(self, out var power) && self.lowerBodyFramesOffGround > 0 && self.upperBodyFramesOffGround > 0 && self.input[0].jmp == true)
	//{

		//if ()
		//{

		//}
	//}
//}


// Implement ExlodeOnDeath
/*
private void Player_Die(On.Player.orig_Die orig, Player self)
{
	bool wasDead = self.dead;

	orig(self);

	if(!wasDead && self.dead
	&& ExplodeOnDeath.TryGet(self, out bool explode)
	&& explode)
	{
		// Adapted from ScavengerBomb.Explode
		var room = self.room;
		var pos = self.mainBodyChunk.pos;
		var color = self.ShortCutColor();
		room.AddObject(new Explosion(room, self, pos, 7, 250f, 6.2f, 2f, 280f, 0.25f, self, 0.7f, 160f, 1f));
		room.AddObject(new Explosion.ExplosionLight(pos, 280f, 1f, 7, color));
		room.AddObject(new Explosion.ExplosionLight(pos, 230f, 1f, 3, new Color(1f, 1f, 1f)));
		room.AddObject(new ExplosionSpikes(room, pos, 14, 30f, 9f, 7f, 170f, color));
		room.AddObject(new ShockWave(pos, 330f, 0.045f, 5, false));

		room.ScreenMovement(pos, default, 1.3f);
		room.PlaySound(SoundID.Bomb_Explode, pos);
		room.InGameNoise(new Noise.InGameNoise(pos, 9000f, self, 1f));
	}
}
*/


//hooks code end




//NOPE



/*
public static void Player_ClassMechanicsSaint(On.Player.orig_Update orig, Player self, bool eu)
        {
            bool flag = self.abstractCreature.world.game.IsStorySession && self.abstractCreature.world.game.StoryCharacter == SecretScug;
            if (self.SlugCatClass == SecretScug)
            {
                if (!MMF.cfgOldTongue.Value && self.input[0].jmp && !self.input[1].jmp && !self.input[0].pckp && self.canJump <= 0 && self.bodyMode != Player.BodyModeIndex.Crawl && self.animation != Player.AnimationIndex.ClimbOnBeam && self.animation != Player.AnimationIndex.AntlerClimb && self.animation != Player.AnimationIndex.HangFromBeam && self.SaintTongueCheck())
                {
                    Vector2 vector = new Vector2((float)self.flipDirection, 0.7f);
                    Vector2 normalized = vector.normalized;
                    if (self.input[0].y > 0)
                    {
                        normalized = new Vector2(0f, 1f);
                    }
                    normalized = (normalized + self.mainBodyChunk.vel.normalized * 0.2f).normalized;
                    self.tongue.Shoot(normalized);
                }
            }
            if (self.SlugCatClass == SecretScug && (self.KarmaCap >= 9 || (self.room.game.session is ArenaGameSession && self.room.game.GetArenaGameSession.arenaSitting.gameTypeSetup.gameType == MoreSlugcatsEnums.GameTypeID.Challenge && self.room.game.GetArenaGameSession.arenaSitting.gameTypeSetup.challengeMeta.ascended)))
            {
                if (self.voidSceneTimer > 0 && flag)
                {
                    self.voidSceneTimer++;
                    if (!BootlegMonkAscension)
                    {
                        self.ActivateAscension();
                    }
                    self.godTimer = self.maxGodTime;
                    if (self.voidSceneTimer > 60)
                    {
                        if (!self.forceBurst)
                        {
                            self.burstX = 0f;
                            self.burstY = 0f;
                        }
                        self.forceBurst = true;
                        self.killWait = Mathf.Min(self.killWait + 0.035f, 1f);
                    }
                }
                if (self.room.world.name == "HR")
                {
                    self.maxGodTime = 560f;
                }
                if (flag && self.AI == null && self.room.game.session is StoryGameSession && !(self.room.game.session as StoryGameSession).saveState.deathPersistentSaveData.SaintEnlightMessage)
                {
                    (self.room.game.session as StoryGameSession).saveState.deathPersistentSaveData.SaintEnlightMessage = true;
                    self.room.game.cameras[0].hud.textPrompt.AddMessage(self.room.game.rainWorld.inGameTranslator.Translate("While in the air, tap jump and pick-up together to take flight."), 240, 480, true, true);
                }
                if (self.wantToJump > 0 && BootlegMonkAscension)
                {
                    self.DeactivateAscension();
                    self.wantToJump = 0;
                }
                else if (self.wantToJump > 0 && self.input[0].pckp && self.canJump <= 0 && !BootlegMonkAscension && !self.tongue.Attached && self.bodyMode != Player.BodyModeIndex.Crawl && self.bodyMode != Player.BodyModeIndex.CorridorClimb && self.bodyMode != Player.BodyModeIndex.ClimbIntoShortCut && self.animation != Player.AnimationIndex.HangFromBeam && self.animation != Player.AnimationIndex.ClimbOnBeam && self.bodyMode != Player.BodyModeIndex.WallClimb && self.bodyMode != Player.BodyModeIndex.Swimming && self.Consious && !self.Stunned && self.godTimer > 0f && self.animation != Player.AnimationIndex.AntlerClimb && self.animation != Player.AnimationIndex.VineGrab && self.animation != Player.AnimationIndex.ZeroGPoleGrab)
                {
                    self.ActivateAscension();
                }
            }
            self.lastKillFac = self.killFac;
            self.lastKillWait = self.killWait;
            if (self.karmaCharging > 0)
            {
                self.godTimer = Mathf.Min(self.godTimer + 1f, self.maxGodTime);
                self.karmaCharging--;
            }
            if (BootlegMonkAscension)
            {
                self.buoyancy = 0f;
                self.godDeactiveTimer = 0f;
                self.animation = Player.AnimationIndex.None;
                self.bodyMode = Player.BodyModeIndex.Default;
                if (self.tongue != null && self.tongue.Attached)
                {
                    self.tongue.Release();
                }
                if (self.godWarmup > -20f)
                {
                    self.godWarmup -= 1f;
                }
                if ((self.room == null || !self.room.game.setupValues.saintInfinitePower) && self.karmaCharging == 0 && self.godWarmup <= 0f)
                {
                    self.godTimer -= 1f;
                }
                if (self.dead || self.stun >= 20)
                {
                    self.DeactivateAscension();
                }
                if (self.godTimer <= 0f)
                {
                    self.godRecharging = true;
                    self.godTimer = -15f;
                    self.DeactivateAscension();
                }
                else
                {
                    self.godRecharging = false;
                }
                if (flag && self.AI == null && self.godTimer <= self.maxGodTime * 0.9f && self.room.game.session is StoryGameSession && !(self.room.game.session as StoryGameSession).saveState.deathPersistentSaveData.KarmicBurstMessage)
                {
                    (self.room.game.session as StoryGameSession).saveState.deathPersistentSaveData.KarmicBurstMessage = true;
                    self.room.game.cameras[0].hud.textPrompt.AddMessage(self.room.game.rainWorld.inGameTranslator.Translate("Hold throw and directional inputs while flying to perform an ascension."), 80, 240, true, true);
                }
                self.gravity = 0f;
                self.airFriction = 0.7f;
                float num = 2.75f;
                if (self.killWait >= 0.2f && !self.forceBurst)
                {
                    self.airFriction = 0.1f;
                    self.bodyChunks[0].vel = Custom.RNV() * Mathf.Lerp(0f, 20f, self.killWait);
                    num = 0f;
                }
                if (self.input[0].y > 0)
                {
                    self.bodyChunks[0].vel.y = self.bodyChunks[0].vel.y + num;
                    self.bodyChunks[1].vel.y = self.bodyChunks[1].vel.y + (num - 1f);
                }
                else if (self.input[0].y < 0)
                {
                    self.bodyChunks[0].vel.y = self.bodyChunks[0].vel.y - num;
                    self.bodyChunks[1].vel.y = self.bodyChunks[1].vel.y - (num - 1f);
                }
                if (self.input[0].x > 0)
                {
                    self.bodyChunks[0].vel.x = self.bodyChunks[0].vel.x + num;
                    self.bodyChunks[1].vel.x = self.bodyChunks[1].vel.x + (num - 1f);
                }
                else if (self.input[0].x < 0)
                {
                    self.bodyChunks[0].vel.x = self.bodyChunks[0].vel.x - num;
                    self.bodyChunks[1].vel.x = self.bodyChunks[1].vel.x - (num - 1f);
                }
                float num2 = 10f;
                float num3 = 400f;
                float num4 = 1f;
                float num5 = 2f;
                float num6 = 0.7f;
                if (!self.input[0].thrw && !self.forceBurst)
                {
                    if (self.voidSceneTimer == 0)
                    {
                        self.burstX *= num6;
                        self.burstY *= num6;
                    }
                    self.burstVelX *= num6;
                    self.burstVelY *= num6;
                    self.killPressed = false;
                    self.killFac *= 0.8f;
                    self.killWait *= 0.95f;
                    return;
                }
                if (!self.killPressed)
                {
                    if (!self.forceBurst)
                    {
                        self.killWait = Mathf.Min(self.killWait + 0.035f, 1f);
                        if (self.killWait == 1f)
                        {
                            self.killFac += 0.025f;
                        }
                    }
                    if (self.input[0].x != 0)
                    {
                        self.burstVelX = Mathf.Clamp(self.burstVelX + (float)self.input[0].x * num4, -num2, num2);
                    }
                    else if (self.burstVelX < -num5)
                    {
                        self.burstVelX += num5;
                    }
                    else if (self.burstVelX > num5)
                    {
                        self.burstVelX -= num5;
                    }
                    else
                    {
                        self.burstVelX = 0f;
                    }
                    if (self.input[0].y != 0)
                    {
                        self.burstVelY = Mathf.Clamp(self.burstVelY + (float)self.input[0].y * num4, -num2, num2);
                    }
                    else if (self.burstVelY < -num5)
                    {
                        self.burstVelY += num5;
                    }
                    else if (self.burstVelY > num5)
                    {
                        self.burstVelY -= num5;
                    }
                    else
                    {
                        self.burstVelY = 0f;
                    }
                    if (!self.forceBurst)
                    {
                        self.burstX = Mathf.Clamp(self.burstX + self.burstVelX, -num3, num3);
                        self.burstY = Mathf.Clamp(self.burstY + self.burstVelY, -num3, num3);
                    }
                    else if (flag)
                    {
                        float num7 = self.wormCutsceneTarget.x - (self.mainBodyChunk.pos.x + self.burstX);
                        float num8 = self.wormCutsceneTarget.y - (self.mainBodyChunk.pos.y + self.burstY + 60f);
                        if (Custom.DistLess(Vector2.zero, new Vector2(num7, num8), 450f))
                        {
                            float num9 = 0.02f;
                            if (self.wormCutsceneLockon)
                            {
                                num9 = 0.25f;
                            }
                            if (num7 > 0f)
                            {
                                self.burstX += Mathf.Clamp(num7 * num9, 2.5f, self.wormCutsceneLockon ? 100f : 10f);
                            }
                            else
                            {
                                self.burstX += Mathf.Clamp(num7 * num9, self.wormCutsceneLockon ? -100f : -10f, -2.5f);
                            }
                            if (num8 > 0f)
                            {
                                self.burstY += Mathf.Clamp(num8 * num9, 2.5f, self.wormCutsceneLockon ? 100f : 10f);
                            }
                            else
                            {
                                self.burstY += Mathf.Clamp(num8 * num9, self.wormCutsceneLockon ? -100f : -10f, -2.5f);
                            }
                            if (Custom.DistLess(Vector2.zero, new Vector2(num7, num8), 40f) && self.killWait == 1f)
                            {
                                self.killFac += 0.025f;
                                self.wormCutsceneLockon = true;
                            }
                        }
                    }
                }
                if (self.killFac >= 1f)
                {
                    num = 60f;
                    Vector2 vector2 = new Vector2(self.mainBodyChunk.pos.x + self.burstX, self.mainBodyChunk.pos.y + self.burstY + 60f);
                    bool flag2 = false;
                    for (int i = 0; i < self.room.physicalObjects.Length; i++)
                    {
                        for (int j = self.room.physicalObjects[i].Count - 1; j >= 0; j--)
                        {
                            if (j >= self.room.physicalObjects[i].Count)
                            {
                                j = self.room.physicalObjects[i].Count - 1;
                            }
                            PhysicalObject physicalObject = self.room.physicalObjects[i][j];
                            if (physicalObject != self)
                            {
                                foreach (BodyChunk bodyChunk in physicalObject.bodyChunks)
                                {
                                    if (Custom.DistLess(bodyChunk.pos, vector2, num + bodyChunk.rad) && self.room.VisualContact(bodyChunk.pos, vector2))
                                    {
                                        bodyChunk.vel += Custom.RNV() * 36f;
                                        if (physicalObject is Creature)
                                        {
                                            if (!(physicalObject as Creature).dead)
                                            {
                                                flag2 = true;
                                            }
                                            (physicalObject as Creature).Die();
                                        }
                                        if (physicalObject is SeedCob && !(physicalObject as SeedCob).AbstractCob.opened && !(physicalObject as SeedCob).AbstractCob.dead)
                                        {
                                            (physicalObject as SeedCob).spawnUtilityFoods();
                                        }
                                        if (self.room.game.session is StoryGameSession && physicalObject is Oracle && flag)
                                        {
                                            if ((physicalObject as Oracle).ID == MoreSlugcatsEnums.OracleID.CL && !(self.room.game.session as StoryGameSession).saveState.deathPersistentSaveData.ripPebbles)
                                            {
                                                (self.room.game.session as StoryGameSession).saveState.deathPersistentSaveData.ripPebbles = true;
                                                self.room.PlaySound(SoundID.SS_AI_Talk_1, self.mainBodyChunk, false, 1f, 0.4f);
                                                Vector2 pos = (physicalObject as Oracle).bodyChunks[0].pos;
                                                self.room.AddObject(new ShockWave(pos, 500f, 0.75f, 18, false));
                                                self.room.AddObject(new Explosion.ExplosionLight(pos, 320f, 1f, 5, Color.white));
                                                Debug.Log("Ascend saint pebbles");
                                                ((physicalObject as Oracle).oracleBehavior as CLOracleBehavior).dialogBox.Interrupt("...", 1);
                                                if (((physicalObject as Oracle).oracleBehavior as CLOracleBehavior).currentConversation != null)
                                                {
                                                    ((physicalObject as Oracle).oracleBehavior as CLOracleBehavior).currentConversation.Destroy();
                                                }
                                                (physicalObject as Oracle).health = 0f;
                                                flag2 = true;
                                            }
                                            if ((physicalObject as Oracle).ID == Oracle.OracleID.SL && !(self.room.game.session as StoryGameSession).saveState.deathPersistentSaveData.ripMoon && (physicalObject as Oracle).glowers > 0 && (physicalObject as Oracle).mySwarmers.Count > 0)
                                            {
                                                for (int l = 0; l < (physicalObject as Oracle).mySwarmers.Count; l++)
                                                {
                                                    (physicalObject as Oracle).mySwarmers[l].ExplodeSwarmer();
                                                }
                                                (self.room.game.session as StoryGameSession).saveState.deathPersistentSaveData.ripMoon = true;
                                                Debug.Log("Ascend saint moon");
                                                ((physicalObject as Oracle).oracleBehavior as SLOracleBehaviorHasMark).dialogBox.Interrupt("...", 1);
                                                if (((physicalObject as Oracle).oracleBehavior as SLOracleBehaviorHasMark).currentConversation != null)
                                                {
                                                    ((physicalObject as Oracle).oracleBehavior as SLOracleBehaviorHasMark).currentConversation.Destroy();
                                                }
                                                Vector2 pos2 = (physicalObject as Oracle).bodyChunks[0].pos;
                                                self.room.AddObject(new ShockWave(pos2, 500f, 0.75f, 18, false));
                                                self.room.AddObject(new Explosion.ExplosionLight(pos2, 320f, 1f, 5, Color.white));
                                                flag2 = true;
                                            }
                                        }
                                        if (physicalObject is Oracle && (physicalObject as Oracle).ID == MoreSlugcatsEnums.OracleID.ST && (physicalObject as Oracle).Consious)
                                        {
                                            Vector2 pos3 = (physicalObject as Oracle).bodyChunks[0].pos;
                                            self.room.AddObject(new ShockWave(pos3, 500f, 0.75f, 18, false));
                                            ((physicalObject as Oracle).oracleBehavior as STOracleBehavior).AdvancePhase();
                                            self.bodyChunks[0].vel = Vector2.zero;
                                            flag2 = true;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    for (int m = 0; m < self.room.updateList.Count; m++)
                    {
                        if (self.room.updateList[m] is Love)
                        {
                            Love love = self.room.updateList[m] as Love;
                            if (love.animator != null && love.timeUntilReboot == 0 && Custom.DistLess(love.pos, vector2, 100f))
                            {
                                love.InitiateReboot();
                                flag2 = true;
                            }
                        }
                    }
                    if (flag2 || self.voidSceneTimer > 0)
                    {
                        self.room.PlaySound(SoundID.Firecracker_Bang, self.mainBodyChunk, false, 1f, 0.75f + UnityEngine.Random.value);
                        self.room.PlaySound(SoundID.SS_AI_Give_The_Mark_Boom, self.mainBodyChunk, false, 1f, 0.5f + UnityEngine.Random.value * 0.5f);
                    }
                    else
                    {
                        self.room.PlaySound(SoundID.Snail_Pop, self.mainBodyChunk, false, 1f, 1.5f + UnityEngine.Random.value);
                    }
                    for (int n = 0; n < 20; n++)
                    {
                        self.room.AddObject(new Spark(vector2, Custom.RNV() * UnityEngine.Random.value * 40f, new Color(1f, 1f, 1f), null, 30, 120));
                    }
                    self.killFac = 0f;
                    self.killWait = 0f;
                    self.killPressed = true;
                    if (self.voidSceneTimer > 0)
                    {
                        self.voidSceneTimer = 0;
                        self.DeactivateAscension();
                        self.controller = null;
                        self.forceBurst = false;
                        return;
                    }
                }
            }
            else
            {
                if (self.godWarmup < 60f && self.godDeactiveTimer > 200f)
                {
                    self.godWarmup += 1f;
                }
                self.godDeactiveTimer += 1f;
                self.killPressed = false;
                self.killFac *= 0.8f;
                self.killWait *= 0.5f;
                float num10 = 0.15f * (self.maxGodTime / 400f);
                if (self.godRecharging)
                {
                    num10 = 0.15f * (self.maxGodTime / 400f);
                }
                self.godTimer = Mathf.Min(self.godTimer + num10, self.maxGodTime);
            }
        }
*/


//NOPE end